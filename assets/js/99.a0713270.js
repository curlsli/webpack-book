(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{185:function(e,t,r){"use strict";r.r(t);var s=r(0),i=Object(s.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),r("p",[e._v("虽然webpack通常用于打包Web应用程序，但它可以做得更多。你可以在Node或桌面环境中使用它，例如Electron。Webpack还可以编写适当的输出包装器打包为库，从而可以使用库。")]),e._m(1),e._m(2),e._m(3),e._m(4),e._m(5),e._m(6),r("blockquote",[r("p",[r("code",[e._v("Web Worker")]),e._v(" 及其用法将在 "),r("a",{attrs:{href:"https://lvzhenbang.github.io/webpack-book/dist/zh/techniques/02_web_workers.html",target:"_blank",rel:"noopener noreferrer"}},[r("em",[e._v("Web Workers")]),r("OutboundLink")],1),e._v(" 这章中详细介绍。")])]),e._m(7),e._m(8),r("p",[e._v("使用Node目标的主要用例是 "),r("em",[e._v("Server Side Rendering")]),e._v("（SSR）。它的核心思想在 "),r("a",{attrs:{href:"https://lvzhenbang.github.io/webpack-book/dist/zh/output/03_server_side_rendering.html",target:"_blank",rel:"noopener noreferrer"}},[r("em",[e._v("Server Side Rendering")]),r("OutboundLink")],1),e._v(" 这章中详细介绍。")]),e._m(9),e._m(10),r("ul",[e._m(11),r("li",[r("code",[e._v("atom")]),e._v(", "),r("code",[e._v("electron")]),e._v(", "),r("code",[e._v("electron-main")]),e._v(" - 目标是 "),r("a",{attrs:{href:"https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron main process"),r("OutboundLink")],1),e._v(".")]),e._m(12)]),r("p",[e._v("[electron-react-boilerplate]（https://github.com/chentsulin/electron-react-boilerplate）是一个很好的开端，如果你想要基于Electron和React开发的热加载的webpack设置。使用[Electron的官方快速入门]（https://github.com/electron/electron-quick-start）是一种方法。")]),e._m(13),r("p",[e._v("Webpack支持Web以外的目标。基于此，来实现其功能的，这对webpack来说是轻而易举。")]),r("p",[e._v("内容回顾：")]),e._m(14),r("p",[e._v("在下一章中，你将学习如何做一个多页面的构建配置。")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"构建目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建目标","aria-hidden":"true"}},[this._v("#")]),this._v(" 构建目标")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Webpack的输出目标由 "),t("code",[this._v("target")]),this._v(" 字段控制。下面将主要介绍构建目标的种类，然后深入了解库所指定的特定选项。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"web目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web目标","aria-hidden":"true"}},[this._v("#")]),this._v(" Web目标")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Webpack默认使用 "),t("em",[this._v("web")]),this._v(" 目标。该目标非常适合Web应用程序。Webpack引导应用程序，并加载其模块。要加载的模块的初始列表在清单中维护，然后模块可以按照定义相互加载。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"web-workers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-workers","aria-hidden":"true"}},[this._v("#")]),this._v(" Web Workers")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("em",[this._v("webworker")]),this._v(" 目标将你的应用程序包装为[Web worker]（https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API）。如果要在应用程序的主线程之外执行计算而不降低用户界面的速度，则使用 "),t("code",[this._v("Web worker")]),this._v(" 非常有用。你需要注意以下几个限制：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("使用 "),t("em",[this._v("webworker")]),this._v(" 目标时，无法使用webpack的hash功能。")]),t("li",[this._v("你无法操纵 "),t("code",[this._v("web worker")]),this._v(" 中的DOM。如果你将图书项目包装为 worker，则不会显示任何内容。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"node目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node目标","aria-hidden":"true"}},[this._v("#")]),this._v(" Node目标")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("p",[e._v("Webpack提供了两个特定的Node目标："),r("code",[e._v("node")]),e._v("和"),r("code",[e._v("async-node")]),e._v("。除非使用异步模式，否则它使用标准节点 "),r("code",[e._v("require")]),e._v(" 来加载块。在这种情况下，它包装模块，以便通过Node的 "),r("code",[e._v("fs")]),e._v(" 和 "),r("code",[e._v("vm")]),e._v(" 模块异步加载它们。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"desktop目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#desktop目标","aria-hidden":"true"}},[this._v("#")]),this._v(" Desktop目标")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("有一些桌面shell，如[NW.js]（https://nwjs.io/）（以前是 "),t("em",[this._v("node-webkit")]),this._v("）和[Electron]（http://electron.atom.io/）（以前是 "),t("em",[this._v("Atom")]),this._v(" ）。Webpack可以有如下目标：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("code",[this._v("node-webkit")]),this._v(" - 在考虑体验时，将NW.js作为目标。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("code",[this._v("electron-renderer")]),this._v(" - 目标是 Electron 的渲染。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Webpack的输出目标可以通过"),t("code",[this._v("target")]),this._v("字段来控制 它默认为 "),t("code",[this._v("web")]),this._v("，但也接受其他选项。")]),t("li",[this._v("除了Web目标之外，Webpack还可以desktop，Node和Web workers。")]),t("li",[this._v("如果是在服务器端渲染的配置中，Node目标会派上用场。")])])}],!1,null,null,null);i.options.__file="01_targets.md";t.default=i.exports}}]);