(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{253:function(e,t,a){"use strict";a.r(t);var i=a(0),o=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion","aria-hidden":"true"}},[e._v("#")]),e._v(" Conclusion")]),a("p",[e._v("As this book has demonstrated, webpack is a versatile tool. To make it easier to recap the content and techniques, go through the checklists below.")]),a("h2",{attrs:{id:"general-checklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general-checklist","aria-hidden":"true"}},[e._v("#")]),e._v(" General Checklist")]),a("ul",[a("li",[a("strong",[e._v("Source maps")]),e._v(" allow you to debug your code in the browser during development. They can also give better quality stack traces during production usage if you capture the output. The "),a("em",[e._v("Source Maps")]),e._v(" chapter delves into the topic.")]),a("li",[e._v("To keep your builds fast, consider optimizing. The "),a("em",[e._v("Performance")]),e._v(" chapter discusses a variety of strategies you can use to achieve this.")]),a("li",[e._v("To keep your configuration maintainable, consider composing it. As webpack configuration is JavaScript code, it can be arranged in many ways. The "),a("em",[e._v("Composing Configuration")]),e._v(" chapter discusses the topic.")]),a("li",[e._v("The way webpack consumes packages can be customized. The "),a("em",[e._v("Consuming Packages")]),e._v(" chapter covers specific techniques related to this.")]),a("li",[e._v("Sometimes you have to extend webpack. The "),a("em",[e._v("Extending with Loaders")]),e._v(" and "),a("em",[e._v("Extending with Plugins")]),e._v(" chapters show how to achieve this. You can also work on top of webpack’s configuration definition and implement an abstraction of your own for it to suit your purposes.")])]),a("h2",{attrs:{id:"development-checklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-checklist","aria-hidden":"true"}},[e._v("#")]),e._v(" Development Checklist")]),a("ul",[a("li",[e._v("To get most out of webpack during development, use "),a("em",[e._v("webpack-dev-server")]),e._v(" (WDS). You can also find middlewares which you can attach to your Node server during development. The "),a("em",[e._v("Automatic Browser Refresh")]),e._v(" chapter covers WDS in greater detail.")]),a("li",[e._v("Webpack implements "),a("strong",[e._v("Hot Module Replacement")]),e._v(" (HMR). It allows you to replace modules without forcing a browser refresh while your application is running. The "),a("em",[e._v("Hot Module Replacement")]),e._v(" appendix covers the topic in detail.")])]),a("h2",{attrs:{id:"production-checklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#production-checklist","aria-hidden":"true"}},[e._v("#")]),e._v(" Production Checklist")]),a("h3",{attrs:{id:"styling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#styling","aria-hidden":"true"}},[e._v("#")]),e._v(" Styling")]),a("ul",[a("li",[e._v("Webpack inlines style definitions to JavaScript by default. To avoid this, separate CSS to a file of its own using "),a("code",[e._v("MiniCssExtractPlugin")]),e._v(" or an equivalent solution. The "),a("em",[e._v("Separating CSS")]),e._v(" chapter covers how to achieve this.")]),a("li",[e._v("To decrease the number of CSS rules to write, consider "),a("strong",[e._v("autoprefixing")]),e._v(" your rules. The "),a("em",[e._v("Autoprefixing")]),e._v(" chapter shows how to do this.")]),a("li",[e._v("Unused CSS rules can be eliminated based on static analysis. The "),a("em",[e._v("Eliminating Unused CSS")]),e._v(" chapter explains the basic idea of this technique.")])]),a("h3",{attrs:{id:"assets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assets","aria-hidden":"true"}},[e._v("#")]),e._v(" Assets")]),a("ul",[a("li",[e._v("When loading images through webpack, optimize them, so the users have less to download. The "),a("em",[e._v("Loading Images")]),e._v(" chapter shows how to do this.")]),a("li",[e._v("Load only the fonts you need based on the browsers you have to support. The "),a("em",[e._v("Loading Fonts")]),e._v(" chapter discusses the topic.")]),a("li",[e._v("Minify your source files to make sure the browser to decrease the payload the client has to download. The "),a("em",[e._v("Minifying")]),e._v(" chapter shows how to achieve this.")])]),a("h3",{attrs:{id:"caching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#caching","aria-hidden":"true"}},[e._v("#")]),e._v(" Caching")]),a("ul",[a("li",[e._v("To benefit from client caching, split a vendor bundle out of your application. This way the client has less to download in the ideal case. The "),a("em",[e._v("Bundle Splitting")]),e._v(" chapter discusses the topic. The "),a("em",[e._v("Adding Hashes to Filenames")]),e._v(" chapter shows how to achieve cache invalidation on top of that.")]),a("li",[e._v("Use webpack’s "),a("strong",[e._v("code splitting")]),e._v(" functionality to load code on demand. The technique is handy if you don’t need all the code at once and instead can push it behind a logical trigger such as clicking a user interface element. The "),a("em",[e._v("Code Splitting")]),e._v(" chapter covers the technique in detail. The "),a("em",[e._v("Dynamic Loading")]),e._v(" chapter shows how to handle more advanced scenarios.")]),a("li",[e._v("Add hashes to filenames as covered in the "),a("em",[e._v("Adding Hashes to Filenames")]),e._v(" chapter to benefit from caching and separate a manifest to improve the solution further as discussed in the "),a("em",[e._v("Separating Manifest")]),e._v(" chapter.")])]),a("h3",{attrs:{id:"optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization","aria-hidden":"true"}},[e._v("#")]),e._v(" Optimization")]),a("ul",[a("li",[e._v("Use ES2015 module definition to leverage "),a("strong",[e._v("tree shaking")]),e._v(". It allows webpack to eliminate unused code paths through static analysis. See the "),a("em",[e._v("Tree Shaking")]),e._v(" chapter for the idea.")]),a("li",[e._v("Set application-specific environment variables to compile it production mode. You can implement feature flags this way. See the "),a("em",[e._v("Environment Variables")]),e._v(" chapter to recap the technique.")]),a("li",[e._v("Analyze build statistics to learn what to improve. The "),a("em",[e._v("Build Analysis")]),e._v(" chapter shows how to do this against multiple available tools.")]),a("li",[e._v("Push a part of the computation to web workers. The "),a("em",[e._v("Web Workers")]),e._v(" chapter covers how to achieve this.")])]),a("h3",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output","aria-hidden":"true"}},[e._v("#")]),e._v(" Output")]),a("ul",[a("li",[e._v("Clean up and attach information about the build to the result. The "),a("em",[e._v("Tidying Up")]),e._v(" chapter shows how to do this.")])]),a("h2",{attrs:{id:"conclusion-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Conclusion")]),a("p",[e._v("Webpack allows you to use a lot of different techniques to splice up your build. It supports multiple output formats as discussed in the "),a("em",[e._v("Output")]),e._v(" part of the book. Despite its name, it’s not only for the web. That’s where most people use it, but the tool does far more than that.")])])}],!1,null,null,null);o.options.__file="13_conclusion.md";t.default=o.exports}}]);